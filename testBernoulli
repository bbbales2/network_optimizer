#%%

import acne
import networkx
import numpy
import matplotlib.pyplot as plt
import itertools


#bias = lambda : 0
G = networkx.Graph()
edges = [(0, 1, { 'f' : 0.0, 'c' : 0.0, 't' : 0 }),
         (0, 2, { 'f' : 0.0, 'c' : 0.0, 't' : 1 }),
         (1, 3, { 'f' : 0.0, 'c' : 0.0, 't' : 2 }),
         (2, 3, { 'f' : 0.0, 'c' : 0.0, 't' : 2 })]
#,

cost = [lambda x : x, lambda x : 1.0, lambda x : 0]
tax = [lambda x : 0, lambda x : 0, lambda x : 0]

start = 0
end = 3

N = 1000 #number of players



bias = [lambda x: .25 if numpy.random.uniform() <= .5 else .75, lambda x: .25 if numpy.random.uniform() <= .5 else .75, lambda x: 0]

#%%


rcost, edgeResults, backtrack, converged, counts, dbg, dbg2, dbg3, dbg4 = acne.runRound(edges, start, end, cost, tax, bias, N)



st = [counts[a] + counts[a+4] for a in range(4)]
pr = [a/(1.0*b) for a,b in zip (counts[:4],st)]
tpr = sum(pr)/4


print (rcost, edgeResults,backtrack,converged)


print  [a for a in dbg2 if dbg[a][1][0][1]==2]

ok= [a  for a in dbg2 if dbg[a][3] > .5 and dbg2[a][1][1][0]>1.5]

err =[a  for a in dbg2 if dbg[a][3] > .5 and dbg2[a][1][1][0]<1.5]